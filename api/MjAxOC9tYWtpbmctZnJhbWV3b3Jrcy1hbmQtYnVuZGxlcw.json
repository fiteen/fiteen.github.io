{"title":"iOS 中 framework 和 bundle 的制作","date":"2018-01-05T05:57:10.000Z","date_formatted":{"ll":"Jan 5, 2018","L":"01/05/2018","MM-DD":"01-05"},"link":"2018/making-frameworks-and-bundles","comments":true,"tags":["SDK","bundle","framework"],"categories":["iOS"],"updated":"2022-09-02T06:38:13.731Z","content":"<h2 id=\"framework\">Framework<a title=\"#framework\" href=\"#framework\"></a></h2>\n<p><strong>Framework</strong> 是<strong>资源的集合</strong>，将静态库和其头文件包含到一个结构中，让 Xcode 可以方便地把它纳入到你的项目中。</p>\n<span id=\"more\"></span>\n<p>在运行时，库中按你的想法暴露需要的头文件，整个工程都可以调用暴露出来的接口和参数，这样减少了内存消耗，提高了系统的性能。</p>\n<h3 id=\"为什么使用-framework\">为什么使用 framework<a title=\"#为什么使用-framework\" href=\"#为什么使用-framework\"></a></h3>\n<p>与别人分享自己开发的组件，有两种方式。</p>\n<ul>\n<li>直接提供源代码。</li>\n<li>将组件代码编译成静态库，供他人调用。</li>\n</ul>\n<p>第一种方式容易被人看到具体实现的细节，这些可能是你不想暴露出来的。此外，开发者也可能并不想看到你的所有代码，而仅仅是希望将功能的一部分植入到自己的应用中。</p>\n<p>因此很多组件的封装采用第二种方式，这也是下文介绍的主要内容。</p>\n<h3 id=\"配置静态库工程\">配置静态库工程<a title=\"#配置静态库工程\" href=\"#配置静态库工程\"></a></h3>\n<p><strong>步骤 1</strong>：打开 Xcode ，依次点击 <code>Create a new Xcode project → iOS → Cocoa Touch Framework</code>，在 <code>Product Name</code> 中填写名称。（注：这就是最后 framework 的名称。）</p>\n<p><strong>步骤 2</strong>：假如你的项目依赖某些系统库，那么需要通过点击 <code>Targets → Build Phases → Link Binary with Libraries</code>，点击 <code>+</code> 符号将它们添加到工程中。</p>\n<p><strong>步骤 3</strong>：修改 Project 中的 iOS Deployment Target 版本号，选择你的框架最低支持的 iOS 版本。</p>\n<p><strong>步骤 4</strong>：如果组件中存在 <code>.xib</code> 文件，请确保 <code>TARGETS → Build Phases → Copy Bundle Resources</code> 下存在该 xib 文件。</p>\n<p><strong>步骤 5</strong>：将封装好的组件文件夹拖入到项目目录下，选择你要公开的头文件。</p>\n<p><strong>步骤 6</strong>：依次点击 <code>TARGETS → Build Phases → Headers</code>，目录下有：</p>\n<ul>\n<li>Public：存放公开的头文件，给外部调用。</li>\n<li>Private：存放私有的 Header，但头文件在编译之后还会存在。一般用来存放项目中需要调用但又不想给别人看到其内部实现的文件。</li>\n<li>Project：隐藏的文件。</li>\n</ul>\n<h3 id=\"导出-framework\">导出 framework<a title=\"#导出-framework\" href=\"#导出-framework\"></a></h3>\n<p>选中 Scheme 选择当前项目，然后右边设备依次选中 Generic iOS Device（通用真机版本）和任一模拟器，分别编译（command + B），成功将会自动跳转到打出的 <code>.framework</code> 文件相应的目录下。</p>\n<h3 id=\"合成-framework\">合成 framework<a title=\"#合成-framework\" href=\"#合成-framework\"></a></h3>\n<p>为了让用户能统一调用一个 framework ，还需要将二者合成为一个 framework 。这里介绍一种简单的方法：</p>\n<p>1、新建一个 target，依次点击 <code>TARGETS 左下角的加号按钮 → Cross-platform → Other 下的 Aggregate</code>。</p>\n<p>2、点击工程文件，选 <code>TARGETS → 刚才创建的 Aggregate → Build Phases → + → New Run Script Phases</code>。在当前栏目里会多出一个 <code>Run Script</code> ，在里面输入以下脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">要build的target名</span></span><br><span class=\"line\">TARGET_NAME=$&#123;PROJECT_NAME&#125;</span><br><span class=\"line\">if [[ $1 ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">TARGET_NAME=$1</span><br><span class=\"line\">fi</span><br><span class=\"line\">UNIVERSAL_OUTPUT_FOLDER=&quot;$&#123;SRCROOT&#125;/$&#123;PROJECT_NAME&#125;/&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建输出目录，并删除之前的 framework 文件</span></span><br><span class=\"line\">mkdir -p &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;&quot;</span><br><span class=\"line\">rm -rf &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">分别编译模拟器和真机的 framework</span></span><br><span class=\"line\">xcodebuild -target &quot;$&#123;TARGET_NAME&#125;&quot; ONLY_ACTIVE_ARCH=NO -configuration $&#123;CONFIGURATION&#125; -sdk iphoneos BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; clean build</span><br><span class=\"line\">xcodebuild -target &quot;$&#123;TARGET_NAME&#125;&quot; ONLY_ACTIVE_ARCH=NO -configuration $&#123;CONFIGURATION&#125; -sdk iphonesimulator BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; clean build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">拷贝 framework 到 univer 目录</span></span><br><span class=\"line\">cp -R &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework&quot; &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">合并 framework，输出最终的 framework 到 build 目录</span></span><br><span class=\"line\">lipo -create -output &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除编译之后生成的无关的配置文件</span></span><br><span class=\"line\">dir_path=&quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/&quot;</span><br><span class=\"line\">for file in ls $dir_path</span><br><span class=\"line\">do</span><br><span class=\"line\">if [[ $&#123;file&#125; =~ &quot;.xcconfig&quot; ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">rm -f &quot;$&#123;dir_path&#125;/$&#123;file&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">判断 build 文件夹是否存在，存在则删除</span></span><br><span class=\"line\">if [ -d &quot;$&#123;SRCROOT&#125;/build&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">rm -rf &quot;$&#123;SRCROOT&#125;/build&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">rm -rf &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打开合并后的文件夹</span></span><br><span class=\"line\">open &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p>3、使用脚本进行编译 (command + B)，成功后将会自动跳转到打出的 <code>.framework</code> 文件相应的目录下。</p>\n<h3 id=\"查看是否成功\">查看是否成功<a title=\"#查看是否成功\" href=\"#查看是否成功\"></a></h3>\n<p><strong>步骤 1</strong>：打开终端，进入到你的 framework 文件所在的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;yourFrameworkName&#125;</span>.framework</span><br></pre></td></tr></table></figure>\n<p><strong>步骤 2</strong>：查看架构支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lipo -info <span class=\"variable\">$&#123;yourFrameworkName&#125;</span>.framework/<span class=\"variable\">$&#123;yourFrameworkName&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: <span class=\"variable\">$&#123;yourFrameworkName&#125;</span> are: i386 x86_64 armv7 arm64 (支持的架构显示在这)</span><br></pre></td></tr></table></figure>\n<p><strong>设备的 CPU 架构(指令集)</strong></p>\n<ul>\n<li>模拟器\n<ul>\n<li><strong>i386</strong>: 针对 intel 通用微处理器 32 位架构，如 iPhone 4s-5:</li>\n<li><strong>x86_64</strong>: 针对 x86 架构的 64 位处理器</li>\n</ul>\n</li>\n<li>真机\n<ul>\n<li><strong>armv6</strong>: iPhone、iPhone 2、iPhone 3G、iPod 1G/2G（Xcode4.5 起已不再支持 armv6）</li>\n<li><strong>armv7</strong>: iPhone 3Gs、iPhone 4、iPhone 4s、iPod 3G/4G/5G、iPad、iPad 2、iPad 3、iPad Mini</li>\n<li><strong>armv7s</strong>: iPhone 5、iPhone 5c、iPad 4</li>\n<li><strong>arm64</strong>: iPhone 5s、iPhone 6(Plus)、iPhone 6s(Plus)、iPad Air(2)、Retina iPad Mini(2,3)</li>\n<li><strong>arm64e</strong>:  iPhone XS\\XR\\XS Max</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"引入-framework-的注意事项\">引入 framework 的注意事项<a title=\"#引入-framework-的注意事项\" href=\"#引入-framework-的注意事项\"></a></h3>\n<p>引入的 framework 里存在分类的话，编译运行项目会报形如 <code>xxx unrecognized selector sent to class xxx</code> 的错误。</p>\n<p><strong>解决办法：</strong></p>\n<p>选中左边栏的项目文件，然后依次点击 <code>Targets → Build Settings → Linking → Other Linker Flags</code>，在里面添加 <code>-ObjC</code> 再次编译就能正常运行。</p>\n<p><strong>补充知识：</strong></p>\n<p>从 C 代码到可执行文件经历编译步骤是：</p>\n<blockquote>\n<p>源代码 &gt; 预处理器 &gt; 编译器 &gt; 汇编器 &gt; 机器码 &gt; 链接器 &gt; 可执行文件。</p>\n</blockquote>\n<p>在最后一步需要把 <code>.o</code> 文件和 C 语言运行库链接起来，这时需要用到 <code>ld</code> 命令。源文件经过一系列处理后，会生成对应的 <code>.obj</code> 文件，一个项目必然会有多个 <code>.obj</code> 文件，并且这些文件之间存在各种联系，如函数调用等。链接器做的事就是把目标文件和所用的一些库链接在一起形成一个完整的可执行文件。<code>Other Linker Flags</code> 设置的值实际上就是 <code>ld</code> 命令执行时后面所加的参数。下面介绍 3 个常用参数：</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-ObjC</code></td>\n<td>链接器会把静态库中所有的 Objective-C 类和分类都加载到最后的可执行文件中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-all_load</code></td>\n<td>链接器会让所有找到的目标文件都加载到可执行文件中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-force_load</code></td>\n<td>需要指定要进行全部加载的库文件的路径</td>\n</tr>\n</tbody>\n</table></div></div><p><strong>注意：千万不要随便使用 <code>-all_load </code> 这个参数！假如你使用了不止一个静态库，然后又使用了这个参数，那么很有可能会遇到 <code>ld: duplicate symbol</code> 错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到 <code>-ObjC</code> 失效的情况下使用 <code>-force_load</code> 参数。</strong></p>\n<h2 id=\"bundle\">Bundle<a title=\"#bundle\" href=\"#bundle\"></a></h2>\n<h3 id=\"什么是-bundle\">什么是 bundle<a title=\"#什么是-bundle\" href=\"#什么是-bundle\"></a></h3>\n<p><strong>Bundle</strong> 可以理解为一个<strong>资源目录</strong>，并包含了程序中会用到的资源，如图像、声音、编译好的代码或 <code>nib</code> 文件等。</p>\n<h3 id=\"创建-bundle\">创建 bundle<a title=\"#创建-bundle\" href=\"#创建-bundle\"></a></h3>\n<p>Bundle 创建有两种方式：</p>\n<h4 id=\"简单的创建-bundle\">简单的创建 bundle<a title=\"#简单的创建-bundle\" href=\"#简单的创建-bundle\"></a></h4>\n<p>创建一个文件夹，强制重命名该文件夹为 <code>$&#123;yourBundleName&#125;.bundle</code>。</p>\n<h4 id=\"通过-xcode-创建-bundle\">通过 Xcode 创建 bundle<a title=\"#通过-xcode-创建-bundle\" href=\"#通过-xcode-创建-bundle\"></a></h4>\n<p><strong>步骤 1</strong>：新建一个项目，依次点击 <code>TARGETS → + → mac OS → Framework &amp; Library → Bundle</code>，输入 <code>Product Name</code>即建立出 bundle 工程；</p>\n<p><strong>步骤 2</strong>：在 bundle 目录下添加需要的资源文件，编译之后在整个项目工程的 Products 文件夹下得到资源文件 bundle 。</p>\n<p>这样做默认情况下 bundle 里面的 <code>png</code> 图片会被转为 <code>tiff</code> 的格式。因此在编译前需要做一步设置：找到 bundle 的工程，把 <code>Build Settings</code> 里的 <code>COMBINE_HIDPI_IMAGES</code> 设置为 <code>NO</code> 之后再编译运行。</p>\n","prev":{"title":"Mac 下避免 rm 引发的血案","link":"2018/avoid-rm-induced-bloody-cases"},"next":{"title":"『2017』去年今日此门中","link":"2017/annual-summary-2017"},"plink":"https://blog.fiteen.top/2018/making-frameworks-and-bundles/","toc":[{"id":"framework","title":"Framework","index":"1"},{"id":"bundle","title":"Bundle","index":"2"}],"reward":true,"copyright":{"author":"FiTeen","link":"<a href=\"https://blog.fiteen.top/2018/making-frameworks-and-bundles/\" title=\"iOS 中 framework 和 bundle 的制作\">https://blog.fiteen.top/2018/making-frameworks-and-bundles/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}