{"title":"如何实现 iOS App 的冷启动优化","date":"2020-02-29T04:19:22.000Z","date_formatted":{"ll":"Feb 29, 2020","L":"02/29/2020","MM-DD":"02-29"},"thumbnail":"2020/ios-app-launch-optimization/app-launch.png","link":"2020/ios-app-launch-optimization","comments":true,"tags":["Instruments","MachOView","冷启动"],"categories":["iOS"],"updated":"2022-09-02T06:38:13.721Z","content":"<p>当 App 中的业务模块越来越多、越来越复杂，集成了更多的三方库，App 启动也会越来越慢，因此我们希望能在业务扩张的同时，保持较优的启动速度，给用户带来良好的使用体验。</p>\n<span id=\"more\"></span>\n<h2 id=\"热启动与冷启动\">热启动与冷启动<a title=\"#热启动与冷启动\" href=\"#热启动与冷启动\"></a></h2>\n<p>当用户按下 home 键，iOS App 不会立刻被 kill，而是存活一段时间，这段时间里用户再打开 App，App 基本上不需要做什么，就能还原到退到后台前的状态。我们把 App 进程还在系统中，无需开启新进程的启动过程称为<strong>热启动</strong>。</p>\n<p>而<strong>冷启动</strong>则是指 App 不在系统进程中，比如设备重启后，或是手动杀死 App 进程，又或是 App 长时间未打开过，用户再点击启动 App 的过程，这时需要创建一个新进程分配给 App。我们可以将冷启动看作一次完整的 App 启动过程，本文讨论的就是冷启动的优化。</p>\n<h2 id=\"冷启动概要\">冷启动概要<a title=\"#冷启动概要\" href=\"#冷启动概要\"></a></h2>\n<p>WWDC 2016 中首次出现了 App 启动优化的话题，其中提到：</p>\n<ul>\n<li>App 启动最佳速度是 400ms 以内，因为从点击 App 图标启动，然后 Launch Screen 出现再消失的时间就是 400ms；</li>\n<li>App 启动最慢不得大于 20s，否则进程会被系统杀死；（启动时间最好以 App 所支持的最低配置设备为准。）</li>\n</ul>\n<p>冷启动的整个过程是指从用户唤起 App 开始到 AppDelegate 中的 <code>didFinishLaunchingWithOptions</code> 方法执行完毕为止，并以执行 <code>main()</code> 函数的时机为分界点，分为 <code>pre-main</code> 和 <code>main()</code> 两个阶段。</p>\n<p>也有一种说法是将整个冷启动阶段以主 UI 框架的 <code>viewDidAppear</code> 函数执行完毕才算结束。这两种说法都可以，前者的界定范围是 App 启动和初始化完毕，后者的界定范围是用户视角的启动完毕，也就是首屏已经被加载出来。</p>\n<blockquote>\n<p><strong>注意</strong>：这里很多文章都会把第二个阶段描述为 <strong>main 函数之后</strong>，个人认为这种说法不是很好，容易让人误解。要知道 main 函数在 App 运行过程中是不会退出的，无论是 AppDelegate 中的 <code>didFinishLaunchingWithOptions</code> 方法还是 ViewController 中的<code>viewDidAppear</code> 方法，都还是在 main 函数内部执行的。</p>\n</blockquote>\n<h2 id=\"pre-main-阶段\">pre-main 阶段<a title=\"#pre-main-阶段\" href=\"#pre-main-阶段\"></a></h2>\n<p><code>pre-main</code> 阶段指的是从用户唤起 App 到 <code>main()</code> 函数执行之前的过程。</p>\n<h3 id=\"查看阶段耗时\">查看阶段耗时<a title=\"#查看阶段耗时\" href=\"#查看阶段耗时\"></a></h3>\n<p>我们可以在 Xcode 中配置环境变量 <code>DYLD_PRINT_STATISTICS</code> 为 1（<code>Edit Scheme → Run → Arguments → Environment Variables → +</code>）。</p>\n<p><img src=\"/2020/ios-app-launch-optimization/set-environment-variables.png\" alt=\"设置环境变量\" class=\"φcx\"></p>\n<p>这时在 iOS 10 以上系统中运行一个 TestDemo，<code>pre-main</code> 阶段的启动时间会在控制台中打印出来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre-main time: 354.21 milliseconds (100.0%)</span><br><span class=\"line\">         dylib loading time:  25.52 milliseconds (7.2%)</span><br><span class=\"line\">        rebase/binding time:  12.70 milliseconds (3.5%)</span><br><span class=\"line\">            ObjC setup time: 152.74 milliseconds (43.1%)</span><br><span class=\"line\">           initializer time: 163.24 milliseconds (46.0%)</span><br><span class=\"line\">           slowest intializers :</span><br><span class=\"line\">             libSystem.B.dylib :   7.98 milliseconds (2.2%)</span><br><span class=\"line\">   libBacktraceRecording.dylib :  13.53 milliseconds (3.8%)</span><br><span class=\"line\">    libMainThreadChecker.dylib :  41.11 milliseconds (11.6%)</span><br><span class=\"line\">                      TestDemo :  88.76 milliseconds (25.0%)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果要更详细的信息，就设置 <code>DYLD_PRINT_STATISTICS_DETAILS</code> 为 1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  total time: 1.6 seconds (100.0%)</span><br><span class=\"line\">  total images loaded:  388 (381 from dyld shared cache)</span><br><span class=\"line\">  total segments mapped: 23, into 413 pages</span><br><span class=\"line\">  total images loading time: 805.78 milliseconds (48.6%)</span><br><span class=\"line\">  total load time <span class=\"keyword\">in</span> ObjC: 152.74 milliseconds (9.2%)</span><br><span class=\"line\">  total debugger pause time: 780.26 milliseconds (47.1%)</span><br><span class=\"line\">  total dtrace DOF registration time:   0.00 milliseconds (0.0%)</span><br><span class=\"line\">  total rebase fixups:  54,265</span><br><span class=\"line\">  total rebase fixups time:  20.77 milliseconds (1.2%)</span><br><span class=\"line\">  total binding fixups: 527,211</span><br><span class=\"line\">  total binding fixups time: 513.54 milliseconds (31.0%)</span><br><span class=\"line\">  total weak binding fixups time:   0.31 milliseconds (0.0%)</span><br><span class=\"line\">  total redo shared cached bindings time: 521.93 milliseconds (31.5%)</span><br><span class=\"line\">  total bindings lazily fixed up: 0 of 0</span><br><span class=\"line\">  total time <span class=\"keyword\">in</span> initializers and ObjC +load: 163.24 milliseconds (9.8%)</span><br><span class=\"line\">                         libSystem.B.dylib :   7.98 milliseconds (0.4%)</span><br><span class=\"line\">               libBacktraceRecording.dylib :  13.53 milliseconds (0.8%)</span><br><span class=\"line\">                libMainThreadChecker.dylib :  41.11 milliseconds (2.4%)</span><br><span class=\"line\">              libViewDebuggerSupport.dylib :   6.68 milliseconds (0.4%)</span><br><span class=\"line\">                                  TestDemo :  88.76 milliseconds (5.3%)</span><br><span class=\"line\">total symbol trie searches:    1306942</span><br><span class=\"line\">total symbol table binary searches:    0</span><br><span class=\"line\">total images defining weak symbols:  41</span><br><span class=\"line\">total images using weak symbols:  105</span><br></pre></td></tr></table></figure>\n<p>这里统计到的启动耗时出现一定波动是正常的，无须过分在意。</p>\n<h3 id=\"理论知识\">理论知识<a title=\"#理论知识\" href=\"#理论知识\"></a></h3>\n<p>为了更准确地了解 App 启动的流程，我们先熟悉一下几个概念。</p>\n<h4 id=\"mach-o\">Mach-O<a title=\"#mach-o\" href=\"#mach-o\"></a></h4>\n<p><a href=\"https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html\" target=\"_blank\">Mach-O</a>（Mach Object File Format)是一种用于记录可执行文件、对象代码、共享库、动态加载代码和内存转储的文件格式。App 编译生成的二进制<strong>可执行文件</strong>就是 Mach-O 格式的，iOS 工程所有的类编译后会生成对应的目标文件 <code>.o</code> 文件，而这个可执行文件就是这些 <code>.o</code> 文件的集合。</p>\n<p>在 Xcode 的控制台输入以下命令，可以打印出运行时所有加载进应用程序的 Mach-O 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image list -o -f</span><br></pre></td></tr></table></figure>\n<p>Mach-O 文件主要由三部分组成：</p>\n<ul>\n<li>Mach header：描述 Mach-O 的 CPU 架构、文件类型以及加载命令等；</li>\n<li>Load commands：描述了文件中数据的具体组织结构，不同的数据类型使用不同的加载命令；</li>\n<li>Data：Data 中的每个段（segment）的数据都保存在这里，每个段都有一个或多个 Section，它们存放了具体的数据与代码，主要包含这三种类型：\n<ul>\n<li><code>__TEXT</code> 包含 Mach header，被执行的代码和只读常量（如 C 字符串）。只读可执行（r-x）。</li>\n<li><code>__DATA</code> 包含全局变量，静态变量等。可读写（rw-）。</li>\n<li><code>__LINKEDIT</code> 包含了加载程序的<strong>元数据</strong>，比如函数的名称和地址。只读（r–-）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"dylib\">dylib<a title=\"#dylib\" href=\"#dylib\"></a></h4>\n<p>dylib 也是一种 Mach-O 格式的文件，后缀名为 <code>.dylib</code> 的文件就是动态库（也叫动态链接库）。动态库是运行时加载的，可以被多个 App 的进程共用。</p>\n<p>如果想知道 TestDemo 中依赖的所有动态库，可以通过下面的指令实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otool -L /TestDemo.app/TestDemo</span><br></pre></td></tr></table></figure>\n<p>动态链接库分为<strong>系统 dylib</strong> 和<strong>内嵌 dylib</strong>（embed dylib，即开发者手动引入的动态库）。系统 dylib 有：</p>\n<ul>\n<li>iOS 中用到的所有系统 framework，比如 UIKit、Foundation；</li>\n<li>系统级别的 libSystem（如 libdispatch(GCD)、libsystem_c(C 语言库)、libsystem_blocks(Block)、libCommonCrypto(加密库，比如常用的 md5)）；</li>\n<li>加载 OC runtime 方法的 libobjc；</li>\n<li>……</li>\n</ul>\n<h4 id=\"dyld\">dyld<a title=\"#dyld\" href=\"#dyld\"></a></h4>\n<p><a href=\"https://opensource.apple.com/tarballs/dyld/\" target=\"_blank\">dyld</a>（Dynamic Link Editor）：动态链接器，其本质也是 Mach-O 文件，一个专门用来加载 dylib 文件的库。 dyld 位于 <code>/usr/lib/dyld</code>，可以在 mac 和越狱机中找到。dyld 会将 App 依赖的动态库和 App 文件加载到内存后执行。</p>\n<h4 id=\"dyld-shared-cache\">dyld shared cache<a title=\"#dyld-shared-cache\" href=\"#dyld-shared-cache\"></a></h4>\n<p>dyld shared cache 就是动态库共享缓存。当需要加载的动态库非常多时，相互依赖的符号也更多了，为了节省解析处理符号的时间，OS X 和 iOS 上的动态链接器使用了共享缓存。OS X 的共享缓存位于 <code>/private/var/db/dyld/</code>，iOS 的则在 <code>/System/Library/Caches/com.apple.dyld/</code>。</p>\n<p>当加载一个 Mach-O 文件时，dyld 首先会检查是否存在于共享缓存，存在就直接取出使用。每一个进程都会把这个共享缓存映射到了自己的地址空间中。这种方法大大优化了 OS X 和 iOS 上程序的启动时间。</p>\n<h4 id=\"images\">images<a title=\"#images\" href=\"#images\"></a></h4>\n<p>images 在这里不是指图片，而是<strong>镜像</strong>。每个 App 都是以 images 为单位进行加载的。images 类型包括：</p>\n<ul>\n<li>executable：应用的二进制可执行文件；</li>\n<li>dylib：动态链接库；</li>\n<li>bundle：资源文件，属于不能被链接的 dylib，只能在运行时通过 <code>dlopen()</code> 加载。</li>\n</ul>\n<h4 id=\"framework\">framework<a title=\"#framework\" href=\"#framework\"></a></h4>\n<p>framework 可以是动态库，也是静态库，是一个包含 dylib、bundle 和头文件的文件夹。</p>\n<h3 id=\"启动过程分析与优化\">启动过程分析与优化<a title=\"#启动过程分析与优化\" href=\"#启动过程分析与优化\"></a></h3>\n<p>启动一个应用时，系统会通过 <code>fork()</code> 方法来新创建一个进程，然后执行镜像通过 <code>exec()</code> 来替换为另一个可执行程序，然后执行如下操作：</p>\n<ol>\n<li>把可执行文件加载到内存空间，从可执行文件中能够分析出 dyld 的路径；</li>\n<li>把 dyld 加载到内存；</li>\n<li>dyld 从可执行文件的依赖开始，递归加载所有的依赖动态链接库 dylib 并进行相应的初始化操作。</li>\n</ol>\n<p>结合上面 <code>pre-main</code> 打印的结果，我们可以大致了解整个启动过程如下图所示：</p>\n<p><img src=\"/2020/ios-app-launch-optimization/pre-main-launch-step.png\" alt class=\"φcx\"></p>\n<h4 id=\"load-dylibs\">Load Dylibs<a title=\"#load-dylibs\" href=\"#load-dylibs\"></a></h4>\n<p>这一步，指的是<strong>动态库加载</strong>。在此阶段，dyld 会：</p>\n<ol>\n<li>分析 App 依赖的所有 dylib；</li>\n<li>找到 dylib 对应的 Mach-O 文件；</li>\n<li>打开、读取这些 Mach-O 文件，并验证其有效性；</li>\n<li>在系统内核中注册代码签名；</li>\n<li>对 dylib 的每一个 segment 调用 <code>mmap()</code>。</li>\n</ol>\n<p>一般情况下，iOS App 需要加载 100-400 个 dylibs。这些动态库包括系统的，也包括开发者手动引入的。其中大部分 dylib 都是系统库，系统已经做了优化，因此开发者更应关心自己手动集成的内嵌 dylib，加载它们时性能开销较大。</p>\n<p>App 中依赖的 dylib 越少越好，Apple 官方建议尽量将内嵌 dylib 的个数维持在 6 个以内。</p>\n<p><strong>优化方案</strong>：</p>\n<ul>\n<li>尽量不使用内嵌 dylib；</li>\n<li>合并已有内嵌 dylib；</li>\n<li>检查 framework 的 <code>optional</code> 和 <code>required</code> 设置，如果 framework 在当前的 App 支持的 iOS 系统版本中都存在，就设为 <code>required</code>，因为设为 <code>optional</code> 会有额外的检查导致加载变慢；</li>\n<li>使用静态库作为代替；（不过静态库会在编译期被打进可执行文件，造成可执行文件体积增大，两者各有利弊，开发者自行权衡。）</li>\n<li>懒加载 dylib。（但使用 <code>dlopen()</code> 对性能会产生影响，因为 App 启动时是原本是单线程运行，系统会取消加锁，但 <code>dlopen()</code> 开启了多线程，系统不得不加锁，这样不仅会使性能降低，可能还会造成死锁及未知的后果，不是很推荐这种做法。）</li>\n</ul>\n<h4 id=\"rebase/binding\">Rebase/Binding<a title=\"#rebase/binding\" href=\"#rebase/binding\"></a></h4>\n<p>这一步，做的是<strong>指针重定位</strong>。</p>\n<p>在 dylib 的加载过程中，系统为了安全考虑，引入了 ASLR（Address Space Layout Randomization）技术和代码签名。由于 ASLR 的存在，镜像会在新的随机地址（actual_address）上加载，和之前指针指向的地址（preferred_address）会有一个偏差（slide，slide=actual_address-preferred_address），因此 dyld 需要修正这个偏差，指向正确的地址。具体通过这两步实现：</p>\n<p>第一步：<strong>Rebase</strong>，在 image 内部调整指针的指向。将 image 读入内存，并以 page 为单位进行加密验证，保证不会被篡改，性能消耗主要在 IO。</p>\n<p>第二步：<strong>Binding</strong>，符号绑定。将指针指向 image 外部的内容。查询符号表，设置指向镜像外部的指针，性能消耗主要在 CPU 计算。</p>\n<p>通过以下命令可以查看 rebase 和 bind 等信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcrun dyldinfo -rebase -bind -lazy_bind TestDemo.app/TestDemo</span><br></pre></td></tr></table></figure>\n<p>通过 LC_DYLD_INFO_ONLY 可以查看各种信息的偏移量和大小。如果想要更方便直观地查看，推荐使用 <a href=\"https://github.com/fiteen/fiteen.github.io/releases/tag/v0.1.2\" target=\"_blank\">MachOView</a> 工具。</p>\n<p>指针数量越少，指针修复的耗时也就越少。所以，优化该阶段的关键就是减少 <code>__DATA</code> 段中的指针数量。</p>\n<p><strong>优化方案</strong>：</p>\n<ul>\n<li>减少 ObjC 类（class）、方法（selector）、分类（category）的数量，比如合并一些功能，删除无效的类、方法和分类等（可以借助 <a href=\"/resources\">AppCode</a> 的 Inspect Code 功能进行代码瘦身）；</li>\n<li>减少 C++ 虚函数；（虚函数会创建 vtable，这也会在 <code>__DATA</code> 段中创建结构。）</li>\n<li>多用 Swift Structs。（因为 Swift Structs 是静态分发的，它的结构内部做了优化，符号数量更少。）</li>\n</ul>\n<h4 id=\"objc-setup\">ObjC Setup<a title=\"#objc-setup\" href=\"#objc-setup\"></a></h4>\n<p>完成 Rebase 和 Bind 之后，通知 runtime 去做一些代码运行时需要做的事情：</p>\n<ul>\n<li>dyld 会注册所有声明过的 ObjC 类；</li>\n<li>将分类插入到类的方法列表中；</li>\n<li>检查每个 selector 的唯一性。</li>\n</ul>\n<p><strong>优化方案</strong>：</p>\n<p>Rebase/Binding 阶段优化好了，这一步的耗时也会相应减少。</p>\n<h4 id=\"initializers\">Initializers<a title=\"#initializers\" href=\"#initializers\"></a></h4>\n<p>Rebase 和 Binding 属于静态调整（fix-up），修改的是 <code>__DATA</code> 段中的内容，而这里则开始动态调整，往堆和栈中写入内容。具体工作有：</p>\n<ul>\n<li>调用每个 Objc 类和分类中的 <code>+load</code> 方法；</li>\n<li>调用 C/C++ 中的构造器函数（用 <code>attribute((constructor))</code> 修饰的函数）；</li>\n<li>创建非基本类型的 C++ 静态全局变量。</li>\n</ul>\n<p><strong>优化方案</strong>：</p>\n<ul>\n<li>尽量避免在类的 <code>+load</code> 方法中初始化，可以推迟到 <code>+initiailize</code> 中进行；（因为在一个 <code>+load</code> 方法中进行运行时方法替换操作会带来 4ms 的消耗）</li>\n<li>避免使用 <code>__atribute__((constructor))</code> 将方法显式标记为初始化器，而是让初始化方法调用时再执行。比如用 <code>dispatch_once()</code>、<code>pthread_once()</code> 或 <code>std::once()</code>，相当于在第一次使用时才初始化，推迟了一部分工作耗时。：</li>\n<li>减少非基本类型的 C++ 静态全局变量的个数。（因为这类全局变量通常是类或者结构体，如果在构造函数中有繁重的工作，就会拖慢启动速度）</li>\n</ul>\n<p>总结一下 <code>pre-main</code> 阶段可行的优化方案：</p>\n<ul>\n<li>重新梳理架构，减少不必要的内置动态库数量；</li>\n<li>进行代码瘦身，合并或删除无效的 ObjC 类、Category、方法、C++ 静态全局变量等；</li>\n<li>将不必须在 <code>+load</code> 方法中执行的任务延迟到 <code>+initialize</code> 中；</li>\n<li>减少 C++ 虚函数。</li>\n</ul>\n<h2 id=\"main()-阶段\">main() 阶段<a title=\"#main()-阶段\" href=\"#main()-阶段\"></a></h2>\n<p>对于 <code>main()</code> 阶段，主要测量的就是从 <code>main()</code> 函数开始执行到 <code>didFinishLaunchingWithOptions</code> 方法执行结束的耗时。</p>\n<h3 id=\"查看阶段耗时-1\">查看阶段耗时<a title=\"#查看阶段耗时-1\" href=\"#查看阶段耗时-1\"></a></h3>\n<p>这里介绍两种查看 <code>main()</code> 阶段耗时的方法。</p>\n<p><strong>方法一：手动插入代码，进行耗时计算。</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步：在 main() 函数里用变量 MainStartTime 记录当前时间</span></span><br><span class=\"line\"><span class=\"built_in\">CFAbsoluteTime</span> MainStartTime;</span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    MainStartTime = <span class=\"built_in\">CFAbsoluteTimeGetCurrent</span>();</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">UIApplicationMain</span>(argc, argv, <span class=\"literal\">nil</span>, <span class=\"built_in\">NSStringFromClass</span>([AppDelegate <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二步：在 AppDelegate.m 文件中用 extern 声明全局变量 MainStartTime</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"built_in\">CFAbsoluteTime</span> MainStartTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三步：在 didFinishLaunchingWithOptions 方法结束前，再获取一下当前时间，与 MainStartTime 的差值就是 main() 函数阶段的耗时</span></span><br><span class=\"line\"><span class=\"type\">double</span> mainLaunchTime = (<span class=\"built_in\">CFAbsoluteTimeGetCurrent</span>() - MainStartTime);</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;main() 阶段耗时：%.2fms&quot;</span>, mainLaunchTime * <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>方法二：借助 Instruments 的 Time Profiler 工具查看耗时。</strong></p>\n<p>打开方式为：<code>Xcode → Open Developer Tool → Instruments → Time Profiler</code>。</p>\n<p><img src=\"/2020/ios-app-launch-optimization/time-profiler.png\" alt=\"Time Profiler\" class=\"φcx\"></p>\n<p>操作步骤：</p>\n<ol>\n<li>\n<p>配置 Scheme。点击 <code>Edit Scheme</code> 找到 <code>Profile</code> 下的 <code>Build Configuration</code>，设置为 <code>Debug</code>。</p>\n</li>\n<li>\n<p>配置 PROJECT。点击 PROJECT，在 <code>Build Settings</code> 中找到 <code>Build Options</code> 选项里的 <code>Debug Information Format</code>，把 <code>Debug</code> 对应的值改为 <code>DWARF with dSYM File</code>。</p>\n</li>\n<li>\n<p>启动 Time Profiler，点击左上角红色圆形按钮开始检测，然后就可以看到执行代码的完整路径和对应的耗时。</p>\n</li>\n</ol>\n<p>为了方面查看应用程序中实际代码的执行耗时和代码路径实际所在的位置，可以勾选上 <code>Call Tree</code> 中的 <code>Separate Thread</code> 和 <code>Hide System Libraries</code>。</p>\n<p><img src=\"/2020/ios-app-launch-optimization/time-profiler-tree.png\" alt class=\"φcx\"></p>\n<h3 id=\"启动优化\">启动优化<a title=\"#启动优化\" href=\"#启动优化\"></a></h3>\n<p><code>main()</code> 被调用之后，<code>didFinishLaunchingWithOptions</code> 阶段，App 会进行必要的初始化操作，而 <code>viewDidAppear</code> 执行结束之前则是做了首页内容的加载和显示。</p>\n<p>关于 <strong>App 的初始化</strong>，除了统计、日志这种须要在 App 一启动就配置的事件，有一些配置也可以考虑延迟加载。如果你在 <code>didFinishLaunchingWithOptions</code> 中同时也涉及到了<strong>首屏的加载</strong>，那么可以考虑从这些角度优化：</p>\n<ul>\n<li>用纯代码的方式，而不是 xib/Storyboard，来加载首页视图</li>\n<li>延迟暂时不需要的二方/三方库加载；</li>\n<li>延迟执行部分业务逻辑和 UI 配置；</li>\n<li>延迟加载/懒加载部分视图；</li>\n<li>避免首屏加载时大量的本地/网络数据读取；</li>\n<li>在 release 包中移除 NSLog 打印；</li>\n<li>在视觉可接受的范围内，压缩页面中的图片大小；</li>\n<li>……</li>\n</ul>\n<p>如果首屏为 H5 页面，针对它的优化，参考 <a href=\"https://github.com/fiteen/fiteen.github.io/releases/tag/v0.1.5\" target=\"_blank\">VasSonic</a> 的原理，可以从这几个角度入手：</p>\n<ul>\n<li>\n<p>终端耗时</p>\n<ul>\n<li>webView 预加载：在 App 启动时期预先加载了一次 webView，通过创建空的 webView，预先启动 Web 线程，完成一些全局性的初始化工作，对二次创建 webView 能有数百毫秒的提升。</li>\n</ul>\n</li>\n<li>\n<p>页面耗时（静态页面）</p>\n<ul>\n<li>静态直出：服务端拉取数据后通过 Node.js 进行渲染，生成包含首屏数据的 HTML 文件，发布到 CDN 上，webView 直接从 CDN 上获取；</li>\n<li>离线预推：使用离线包。</li>\n</ul>\n</li>\n<li>\n<p>页面耗时（经常需要动态更新的页面）</p>\n<ul>\n<li>并行加载：WebView 的打开和资源的请求并行；</li>\n<li>动态缓存：动态页面缓存在客户端，用户下次打开的时候先打开缓存页面，然后再刷新；</li>\n<li>动静分离：将页面分为静态模板和动态数据，根据不同的启动场景进行不同的刷新方案；</li>\n<li>预加载：提前拉取需要的增量更新数据。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"小结\">小结<a title=\"#小结\" href=\"#小结\"></a></h2>\n<p>随着业务的增长，App 中的模块越来越多，冷启动的时间也必不可少地增加。冷启动本就是一个比较复杂的流程，它的优化没有固定的公式，我们需要结合业务，配合一些性能分析工具和线上监控日志，有耐心、多维度地进行分析和解决。</p>\n<hr>\n<p>参考链接：</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2016/406/\" target=\"_blank\">WWDC2016: Optimizing App Startup Time</a><br>\n<a href=\"https://developer.apple.com/videos/play/wwdc2017/413/\" target=\"_blank\">WWDC2017: App Startup Time: Past, Present, and Future</a><br>\n<a href=\"http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/\" target=\"_blank\">优化 App 的启动时间</a><br>\n<a href=\"https://juejin.im/entry/5b6061bef265da0f574dfd21\" target=\"_blank\">今日头条 iOS 客户端启动速度优化</a><br>\n<a href=\"https://github.com/Tencent/VasSonic\" target=\"_blank\">VasSonic 源码</a></p>\n","prev":{"title":"【持续更新】这些 iOS 冷知识，你知道吗？","link":"2020/ios-trivia"},"next":{"title":"深度理解 NSURLProtocol","link":"2020/hijacking-webview-request-with-nsprotocol"},"plink":"https://blog.fiteen.top/2020/ios-app-launch-optimization/","toc":[{"id":"热启动与冷启动","title":"热启动与冷启动","index":"1"},{"id":"冷启动概要","title":"冷启动概要","index":"2"},{"id":"pre-main-阶段","title":"pre-main 阶段","index":"3"},{"id":"main()-阶段","title":"main() 阶段","index":"4"},{"id":"小结","title":"小结","index":"5"}],"reward":true,"copyright":{"author":"FiTeen","link":"<a href=\"https://blog.fiteen.top/2020/ios-app-launch-optimization/\" title=\"如何实现 iOS App 的冷启动优化\">https://blog.fiteen.top/2020/ios-app-launch-optimization/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}