{"title":"App 多渠道打包及重签名方案","date":"2019-08-10T01:41:39.000Z","date_formatted":{"ll":"Aug 10, 2019","L":"08/10/2019","MM-DD":"08-10"},"thumbnail":"2019/solution-of-app-muti-channel-pack/ipa-and-apk.png","link":"2019/solution-of-app-muti-channel-pack","comments":true,"tags":["重签名"],"categories":["Android","iOS"],"updated":"2022-09-02T06:38:13.743Z","content":"<p>众所周知，渠道包是国内 Android 应用市场中常用的分发方式。渠道包中会包含不同的渠道信息，方便我们后续统计 App 在各分发渠道的下载量、用户量、留存率等，有针对地调整应用内容或是推广方案等。随着国内 iOS 应用上架越来越难，衍生出了很多企业包，为了方便采集数据，也会用多渠道的方案。</p>\n<span id=\"more\"></span>\n<p>另外，项目进展过程中，可能会出现一些临时新增渠道的需求，这时回到工程中重新打包是比较费时的，有没有办法加快打包速度呢？下文中分享了一些方案。</p>\n<h2 id=\"ios-多渠道打包方案\">iOS 多渠道打包方案<a title=\"#ios-多渠道打包方案\" href=\"#ios-多渠道打包方案\"></a></h2>\n<p>iOS 打渠道包目前想到的就只有两种方式，一种是通过<a href=\"#muti-target-way\">多 target 方式</a>，另一种是<a href=\"#revise-plist-way\">修改 plist 文件方式</a>。</p>\n<h3 id=\"&lt;span-id=&quot;muti-target-way&quot;&gt;多-target-方式&lt;/span&gt;\"><span id=\"muti-target-way\">多 target 方式</span><a title=\"#&lt;span-id=&quot;muti-target-way&quot;&gt;多-target-方式&lt;/span&gt;\" href=\"#&lt;span-id=&quot;muti-target-way&quot;&gt;多-target-方式&lt;/span&gt;\"></a></h3>\n<p>点击项目中的 target，右键选择 <code>Duplicate</code>。可以修改下图标红框的三处：target 名称、plist 名称和 scheme 名称。</p>\n<p><img src=\"/2019/solution-of-app-muti-channel-pack/target-copy.png\" alt class=\"φcx\"></p>\n<p>判断当前是哪个 target，可以通过添加宏定义实现，方式就是在 <code>Build Settings</code> 找到 <code>Preprocessor Macros</code>，填入宏定义名。</p>\n<p>代码中这样判断：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span>  TARGET1MACROS</span></span><br><span class=\"line\">    <span class=\"comment\">// target1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">elif</span> defined TARGET2MACROS</span></span><br><span class=\"line\">    <span class=\"comment\">// target2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>具体打包脚本就不介绍了，读者可以自行网上搜索，这种方式的缺点是一个渠道打一次，效率较低。下面着重分享修改 plist 的批量打包方式。</p>\n<h3 id=\"&lt;span-id=&quot;revise-plist-way&quot;&gt;修改-plist-方式&lt;/span&gt;\"><span id=\"revise-plist-way\">修改 plist 方式</span><a title=\"#&lt;span-id=&quot;revise-plist-way&quot;&gt;修改-plist-方式&lt;/span&gt;\" href=\"#&lt;span-id=&quot;revise-plist-way&quot;&gt;修改-plist-方式&lt;/span&gt;\"></a></h3>\n<p>下面用一个简单的 Demo 演示一下：</p>\n<p><strong>第一步</strong>：创建工程名为 MultiChannelDemo 的项目，并在项目中新建一个 <code>Channel.plist</code> 文件，plist 中设置 Channel 字段，值为 channel01。然后在页面上设置一个 label 标签用于显示当前的渠道名称，渠道名可以通过下面的代码获取到：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *channelDic = [<span class=\"built_in\">NSDictionary</span> dictionaryWithContentsOfFile:[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@&quot;Channel&quot;</span> ofType:<span class=\"string\">@&quot;plist&quot;</span>]];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *channel = channelDic[<span class=\"string\">@&quot;Channel&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p><strong>第二步</strong>：把这个项目用可用的证书正常打一个母包，解压这个 ipa 包可以获得一个名为 <code>Payload</code> 的文件夹，里面是一个 .app 文件，右键显示其包内容，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── Base.lproj</span><br><span class=\"line\">├── Channel.plist</span><br><span class=\"line\">├── Info.plist</span><br><span class=\"line\">├── MultiChannelDemo</span><br><span class=\"line\">├── PkgInfo</span><br><span class=\"line\">├── _CodeSignature</span><br><span class=\"line\">└── embedded.mobileprovision</span><br></pre></td></tr></table></figure>\n<p>可以看到，里面的 <code>Channel.plist</code> 也就是在前面工程中新建的存储渠道信息的 plist，我们会修改里面的 Channel 再生成新的渠道包。</p>\n<p><strong>第三步</strong>：提取描述文件用于重签名，上一步中 Payload 的文件夹里有一个 <code>embedded.mobileprovision</code> 文件，这就是我们需要的文件。</p>\n<p><strong>第四步</strong>：新建一个纯文本，里面输入你要新增的渠道号，如：</p>\n<p><img src=\"/2019/solution-of-app-muti-channel-pack/channel-list-txt.png\" alt class=\"φcx\"></p>\n<p><strong>第五步</strong>：写一个脚本文件，内容如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>ChannelPackage.sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入的包名</span><br><span class=\"line\"></span><br><span class=\"line\">name=&quot;MultiChannelDemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----------SDK 渠道包----------&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">appName=&quot;$&#123;name&#125;.app&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">plistBuddy=&quot;/usr/libexec/PlistBuddy&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">configName=&quot;Payload/$&#123;appName&#125;/Channel.plist&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ipa=&quot;$&#123;name&#125;.ipa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出的新包所在的文件夹名</span><br><span class=\"line\"></span><br><span class=\"line\">outUpdateAppDir=&quot;ChannelPackages&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># entitlements.plist 路径</span><br><span class=\"line\"></span><br><span class=\"line\">entitlementsDir=&quot;entitlements.plist&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到当前目录</span><br><span class=\"line\"></span><br><span class=\"line\">currDir=$&#123;PWD&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $&#123;currDir&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;-----$&#123;currDir&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf Payload</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压缩-o：覆盖文件 -q：不显示解压过程</span><br><span class=\"line\"></span><br><span class=\"line\">unzip -o -q $&#123;ipa&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除旧的文件夹，重新生成</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $&#123;outUpdateAppDir&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir $&#123;outUpdateAppDir&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除旧的 entitlements.plist，重新生成</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $&#123;entitlementsDir&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/libexec/PlistBuddy -x -c &quot;print :Entitlements &quot; /dev/stdin &lt;&lt;&lt; $(security cms -D -i Payload/$&#123;appName&#125;/embedded.mobileprovision) &gt; entitlements.plist</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;------------------------开始打包程序------------------------&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 渠道列表文件开始打包</span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(cat ChannelList.txt)</span><br><span class=\"line\"></span><br><span class=\"line\"># 循环数组，修改渠道信息</span><br><span class=\"line\"></span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改 plist 中的 Channel 值</span><br><span class=\"line\"></span><br><span class=\"line\">$plistBuddy -c &quot;Set :Channel $line&quot; $&#123;configName&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># app 重签名</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf Payload/$&#123;appName&#125;/_CodeSignature</span><br><span class=\"line\"></span><br><span class=\"line\">cp embedded.mobileprovision &quot;Payload/$&#123;appName&#125;/embedded.mobileprovision&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 填入可用的证书 ID</span><br><span class=\"line\"></span><br><span class=\"line\">codesign -f -s &quot;iPhone Distribution: XXXXXX.&quot; Payload/$&#123;appName&#125;  --entitlements $&#123;entitlementsDir&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 若输出 Payload/MultiChannelDemo.app: replacing existing signature 说明重签名完成</span><br><span class=\"line\"></span><br><span class=\"line\"># 压缩 -r:递归处理，将指定目录下的所有文件和子目录一并处理 -q:不显示处理过程</span><br><span class=\"line\"></span><br><span class=\"line\">zip -rq &quot;$&#123;outUpdateAppDir&#125;/$line.ipa&quot; Payload</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----------渠道$&#123;line&#125;打包已完成----------&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>脚本里的信息请根据你实际情况修改。到这里准备工作都完成了，需要的文件如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── ChannelList.txt</span><br><span class=\"line\">├── ChannelPackage.sh</span><br><span class=\"line\">├── MultiChannelDemo.ipa</span><br><span class=\"line\">└── embedded.mobileprovision</span><br></pre></td></tr></table></figure>\n<p><strong>第六步</strong>：在当前目录下执行脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh ChannelPackage.sh</span><br></pre></td></tr></table></figure>\n<p>打包完成后生成的 <code>ChannelPackages</code> 文件夹下，就是我们需要的渠道包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── ChannelList.txt</span><br><span class=\"line\">├── ChannelPackage.sh</span><br><span class=\"line\">├── ChannelPackages</span><br><span class=\"line\">│   ├── channel02.ipa</span><br><span class=\"line\">│   ├── channel03.ipa</span><br><span class=\"line\">│   └── channel04.ipa</span><br><span class=\"line\">├── MultiChannelDemo.ipa</span><br><span class=\"line\">├── Payload</span><br><span class=\"line\">│   └── MultiChannelDemo.app</span><br><span class=\"line\">├── embedded.mobileprovision</span><br><span class=\"line\">└── entitlements.plist</span><br></pre></td></tr></table></figure>\n<p>这种自动化打包的方式，可以规避掉 Xcode 本身打包编译的部分时间，快速出包。</p>\n<h2 id=\"android-多渠道打包方案\">Android 多渠道打包方案<a title=\"#android-多渠道打包方案\" href=\"#android-多渠道打包方案\"></a></h2>\n<p>下文介绍的是美团技术团队开源的 <a href=\"https://github.com/Meituan-Dianping/walle\" target=\"_blank\">Walle</a>，它有 <a href=\"#gradle-way\">Gradle 插件</a>和<a href=\"#command-way\">命令行</a>两种使用方式，前者快速集成，后者满足自定义需求。</p>\n<h3 id=\"&lt;span-id=&quot;gradle-way&quot;&gt;gladle-插件方式&lt;/span&gt;\"><span id=\"gradle-way\">Gladle 插件方式</span><a title=\"#&lt;span-id=&quot;gradle-way&quot;&gt;gladle-插件方式&lt;/span&gt;\" href=\"#&lt;span-id=&quot;gradle-way&quot;&gt;gladle-插件方式&lt;/span&gt;\"></a></h3>\n<h4 id=\"配置-build.gradle\">配置 build.gradle<a title=\"#配置-build.gradle\" href=\"#配置-build.gradle\"></a></h4>\n<p>在项目根目录下的 <code>build.gradle</code> 文件中添加 Walle 插件依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">&#x27;com.meituan.android.walle:plugin:1.1.6&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 app 目录下的 <code>build.gradle</code> 文件中 apply 插件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">&#x27;walle&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">&#x27;com.meituan.android.walle:library:1.1.6&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置插件\">配置插件<a title=\"#配置插件\" href=\"#配置插件\"></a></h4>\n<p>在 app 目录下的 <code>build.gradle</code> 文件中进行渠道配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">walle &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定渠道包的输出路径</span></span><br><span class=\"line\">    apkOutputFolder = <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;$&#123;project.buildDir&#125;/outputs/channels&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 定制渠道包的APK的文件名称</span></span><br><span class=\"line\">    apkFileNameFormat = <span class=\"string\">&#x27;$&#123;appName&#125;_v$&#123;versionName&#125;_$&#123;channel&#125;.apk&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 渠道配置文件</span></span><br><span class=\"line\">    channelFile = <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;$&#123;project.getProjectDir()&#125;/channel&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>渠道配置文件里的内容格式详见：<a href=\"https://github.com/Meituan-Dianping/walle/blob/master/app/channel\" target=\"_blank\">渠道配置文件示例</a>。</p>\n<h4 id=\"如何获取渠道信息\">如何获取渠道信息<a title=\"#如何获取渠道信息\" href=\"#如何获取渠道信息\"></a></h4>\n<p>在需要填写渠道信息的地方引用这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> WalleChannelReader.getChannel(<span class=\"built_in\">this</span>.getApplicationContext());</span><br></pre></td></tr></table></figure>\n<h4 id=\"如何生成渠道包\">如何生成渠道包<a title=\"#如何生成渠道包\" href=\"#如何生成渠道包\"></a></h4>\n<p>用 <code>assemble$&#123;variantName&#125;Channels</code> 指令，导出 apk 包。</p>\n<h3 id=\"&lt;span-id=&quot;command-way&quot;&gt;命令行方式&lt;/span&gt;\"><span id=\"command-way\">命令行方式</span><a title=\"#&lt;span-id=&quot;command-way&quot;&gt;命令行方式&lt;/span&gt;\" href=\"#&lt;span-id=&quot;command-way&quot;&gt;命令行方式&lt;/span&gt;\"></a></h3>\n<p>通过命令行方式，可以不打开 IDE，直接导出新渠道的 apk。步骤如下：</p>\n<p>首先，新建一个文件夹，取用一个上面步骤导出的 apk 包，再下载 <a href=\"https://github.com/Meituan-Dianping/walle/releases\" target=\"_blank\">walle-cli-all.jar</a>，两者都放置在这个文件夹目录下。</p>\n<p>然后，在文件夹目录下执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar walle-cli-all.jar put -c <span class=\"variable\">$&#123;channelName&#125;</span> <span class=\"variable\">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>\n<p>若上面的命令执行成功，会在当前目录下生成新的渠道包，名称为 <code>$&#123;apkName&#125;_$&#123;channelName&#125;.apk</code></p>\n<p>如果要批量写入渠道，可以这样，渠道之间用逗号隔开：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar walle-cli-all.jar batch -c <span class=\"variable\">$&#123;channelName0&#125;</span>,<span class=\"variable\">$&#123;channelName1&#125;</span>,<span class=\"variable\">$&#123;channelName2&#125;</span> <span class=\"variable\">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>\n<p>或者指定渠道配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar walle-cli-all.jar batch -c <span class=\"variable\">$&#123;channelFile&#125;</span> <span class=\"variable\">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果要写入额外信息，参考<a href=\"https://github.com/Meituan-Dianping/walle/blob/master/walle-cli/README.md\" target=\"_blank\">官方文档</a>。</p>\n</blockquote>\n<p>如果要检查/显示渠道，命令为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar walle-cli-all.jar show <span class=\"variable\">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>\n<p>Walle 现在既能满足新应用签名方案对安全性的要求，也能满足对渠道包打包时间的要求，有需要的可以尝试。</p>\n","prev":{"title":"还没抢到 HPV？试试这串 JS","link":"2019/oh-hpv"},"next":{"title":"【译】Fucking SwiftUI","link":"2019/fucking-swift-ui"},"plink":"https://blog.fiteen.top/2019/solution-of-app-muti-channel-pack/","toc":[{"id":"ios-多渠道打包方案","title":"iOS 多渠道打包方案","index":"1"},{"id":"android-多渠道打包方案","title":"Android 多渠道打包方案","index":"2"}],"reward":true,"copyright":{"author":"FiTeen","link":"<a href=\"https://blog.fiteen.top/2019/solution-of-app-muti-channel-pack/\" title=\"App 多渠道打包及重签名方案\">https://blog.fiteen.top/2019/solution-of-app-muti-channel-pack/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}