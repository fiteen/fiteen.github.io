{"title":"iOS 购物车设计模式浅析及代码实现","date":"2017-08-17T01:03:04.000Z","date_formatted":{"ll":"Aug 17, 2017","L":"08/17/2017","MM-DD":"08-17"},"thumbnail":"2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/cart.png","link":"2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation","comments":true,"tags":["购物车"],"categories":["iOS"],"updated":"2022-09-02T06:38:13.680Z","content":"<h2 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h2>\n<p>早期以淘宝为代表的 C2C 网站以“<strong>入驻店铺</strong>”模式强势打破了纯线下的商品交易格局，而近年来，通过不断的尝试与改进，各大电商平台也趋于成熟并自成体系。以京东、聚美优品、网易考拉海购、唯品会、小红书为代表 B2C 平台也以“<strong>自营+入驻店铺</strong>”的垂直销售模式进入消费者的视野。但也有不少企业和商家为了避免缴纳高额的入驻保证金和平台年费等，选择开发自己的商城 App 产品，也就是“<strong>自营</strong>”模式。</p>\n<span id=\"more\"></span>\n<p>购物车作为大多数商城中不可或缺的部分，其逻辑和设计往往也取决于商城本身的交易模式与商品的性质。以美团外卖、饿了么为例，作为一个主张快捷消费产品，加上配送的问题，跨店购物的模式显然不适用它，因此购物车的入口并不在一级菜单下，而是在每家店铺商品列表底部。其购物车显示的内容也相对简单，只需包括已选商品信息（名称、价格、数量、增减按钮）、餐盒费、配送费、总价即可。而对于一个功能完善的商城来说，购物车的逻辑显然会复杂许多，下文中将模仿淘宝购物车的需求，对逻辑功能进行整理和编码。</p>\n<h2 id=\"基本需求设计\">基本需求设计<a title=\"#基本需求设计\" href=\"#基本需求设计\"></a></h2>\n<h3 id=\"1、购物车入口\">1、购物车入口<a title=\"#1、购物车入口\" href=\"#1、购物车入口\"></a></h3>\n<ul>\n<li>\n<p>点击 App 底部菜单的购物车 TabbarItem 进入</p>\n</li>\n<li>\n<p>从商品详情页的购物车按钮进入</p>\n</li>\n</ul>\n<p>这里要注意区分购物车列表高度的问题。</p>\n<h3 id=\"2、店铺分区\">2、店铺分区<a title=\"#2、店铺分区\" href=\"#2、店铺分区\"></a></h3>\n<p>当商城支持跨店购物，那么购物车内的所有商品需要按照不同的店铺分区显示，这个分类逻辑的步骤通常由后端完成，我们 iOS 端只需获取输出的数据在 tableView 中展示即可。店铺信息在 section 的 headerView 中展示，另外还会显示一个店铺选择按钮。</p>\n<h3 id=\"3、商品-cell-中展示的信息\">3、商品 cell 中展示的信息<a title=\"#3、商品-cell-中展示的信息\" href=\"#3、商品-cell-中展示的信息\"></a></h3>\n<p>我们通常将商品 cell 分为 <em>normal</em>、<em>edit</em>两类状态，当然商品信息比较简单的情况下，也可以选择只有 Edit 状态。购物车中显示的商品信息包括：</p>\n<ul>\n<li>商品基本信息（展示图片、名称、规格、选择数量、价格（或现价、原价））</li>\n<li>限购信息/降价信息</li>\n<li>购物券满减信息、凑单按钮、活动标志（如狂欢节等）</li>\n<li>选择按钮</li>\n<li>其他</li>\n</ul>\n<p>以上信息在显示的时候遵从一定上下顺序，cell 的布局会根据以上信息的有无适当调整。</p>\n<h3 id=\"4、底部核算界面\">4、底部核算界面<a title=\"#4、底部核算界面\" href=\"#4、底部核算界面\"></a></h3>\n<p>底部界面上功能比较明确——全选按钮、合计标签、结算按钮。</p>\n<p>这部分的关键在于，合计价格和全选按钮的状态都会表单上面的商品选中情况变化。下文中将会分析一下其中的逻辑。</p>\n<h3 id=\"5、商品的增删改\">5、商品的增删改<a title=\"#5、商品的增删改\" href=\"#5、商品的增删改\"></a></h3>\n<ul>\n<li>\n<p>商品的<strong>添加</strong>：1）从商城中添加；2）在购物车列表中增加。添加时需要考虑购物车列表是否已有相同的或是相同店铺的商品。</p>\n</li>\n<li>\n<p>商品的<strong>删除</strong>：1）<em>normal</em> 状态下侧滑删除；2）点击编辑按钮进入<em>edit</em> 状态，点击删除按钮；3）点击右下角的批量删除。</p>\n</li>\n<li>\n<p>商品的<strong>修改</strong>：1）批量编辑修改；2）店铺编辑修改。修改内容包括商品数量和规格。</p>\n</li>\n</ul>\n<p>以上五条涵盖了购物车的基本的功能需求，根据业务需要自行拓展。</p>\n<p><img src=\"/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/shopping-cart-rendering.png\" alt=\"购物车效果图\" class=\"φcx\"></p>\n<h2 id=\"解决思路\">解决思路<a title=\"#解决思路\" href=\"#解决思路\"></a></h2>\n<h3 id=\"1、单选/店铺选择/全选联动模式\">1、单选/店铺选择/全选联动模式<a title=\"#1、单选/店铺选择/全选联动模式\" href=\"#1、单选/店铺选择/全选联动模式\"></a></h3>\n<p>解决思路：</p>\n<p>i）将全选按钮标记为<code>A</code>；</p>\n<p>ii）购物车中<code>m</code>个店铺的选中按钮一次标记为<code>A(0),A(1),...,A(m-1)</code>；</p>\n<p>iii）第<code>x</code>家店铺（<code>x∈(0,m-1)</code>）下的 n 个商品的选中按钮依次标记为<code>A(x,0),A(x,1),...,A(x,n-1)</code>。</p>\n<p>那么：</p>\n<p><code>A(x,0),A(x,1),...,A(x,n-1)</code>全部选中可推导出<code>A(x)</code>选中；</p>\n<p><code>A(0),A(1),...,A(m-1)</code>全部选中可以推导出<code>A</code>选中。</p>\n<p>点击某商品选择按钮<code>A(m,n)</code>的<strong>伪代码</strong>如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A(m,n).selected = !A(m,n).selected;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BOOL</span> shopAllChoose = <span class=\"literal\">YES</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        shopAllChoose &amp;= A(m,i).selected;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A(m).selected = shopAllChoose;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BOOL</span> allChoose = <span class=\"literal\">YES</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        allChoose &amp;= A(j).selected;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.selected = allChoose;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>点击某店铺全选和所有商品全选的代码原理相似。</p>\n<h3 id=\"2、编辑模式\">2、编辑模式<a title=\"#2、编辑模式\" href=\"#2、编辑模式\"></a></h3>\n<p>购物车设计中，出现两类编辑按钮：</p>\n<ul>\n<li>\n<p>导航栏上的全选编辑</p>\n</li>\n<li>\n<p>每个 section 右上角的批量编辑</p>\n</li>\n</ul>\n<p>点击①类按钮，①文本变为“完成”，同时②类按钮隐藏，所有的 cell 进入 <em>edit</em> 状态；</p>\n<p>点击②类按钮，当前按钮文本变为“完成”，该 section 下所有 cell 进入 <em>edit</em> 状态。</p>\n<p>修改商品数量可以通过加减按钮，也可以通过手动输入修改。当然，修改前需要对当前的数量做出判断，是否还能进行加减，或是输入的数据是否合理，如出现限购信息等。</p>\n<p>由于整个购物车的逻辑关系比较多，我们可以考虑将这部分功能单独放在一个 UIView 中处理，数量变化的具体实现可借鉴<a href=\"https://github.com/jkpang/PPNumberButton\" target=\"_blank\">PPNumberButton</a>。</p>\n<h3 id=\"3、删除模式\">3、删除模式<a title=\"#3、删除模式\" href=\"#3、删除模式\"></a></h3>\n<p>除了上文提到的<em>edit</em> 状态下点击删除按钮以外，还有一种就是在<em>normal</em> 状态左滑删除。</p>\n<p><img src=\"/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/edit-delete.png\" alt=\"edit 状态时的删除\" class=\"φcx\"></p>\n<p><img src=\"/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/normal-delete.png\" alt=\"normal 状态时的删除\" class=\"φcx\"></p>\n<p>cell 在 <em>normal</em> 状态时可以左滑删除，而在 <em>edit</em> 状态下点击删除，要在下面方法中做出<code>return YES/NO;</code>的判断和区分。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">BOOL</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>假如要自定义删除键，可以在<code>UITableViewRowAction</code>初始化时在<code>title</code>的定义部分，使用多个空格作为占位符，然后在<code>layoutSubviews</code>中找到 cell 图层上的<code>UITableViewCellDeleteConfirmationView</code>层添加上新定义的删除键。</p>\n<p>点击<code>navigationItem</code>上的“编辑”后，结算按钮变成删除按钮，可以对选中的商品进行删除，由于是店铺模式的存储形式，需要对模型的更新时机进行区分。</p>\n<h3 id=\"4、总价计算\">4、总价计算<a title=\"#4、总价计算\" href=\"#4、总价计算\"></a></h3>\n<p>总价计算公式很简单： <code> 总价=Σ选中的商品的数量 * 选中的商品的单价</code></p>\n<p>但这个公式中存在两个变化量，一个是“<strong>是否选中</strong>”，一个是“<strong>数量</strong>”，也就是说总价刷新出现在以下场景：</p>\n<ul>\n<li>\n<p>有商品的<strong>选中状态</strong>发生了改变： 点击了<strong>单选/店铺选择/全选按钮</strong></p>\n</li>\n<li>\n<p>有选中的商品的<strong>数量</strong>发生改变：点击了<strong>增加/减少</strong>或者<strong>编辑</strong>了数量文本</p>\n</li>\n</ul>\n<hr>\n<p>欢迎评论，最后-&gt; <a href=\"https://github.com/fiteen/HTCart\" target=\"_blank\">Demo 传送门</a></p>\n","prev":{"title":"iOS 自动布局进阶之巧用 IBInspectable 和 IB_DESIGNABLE","link":"2017/how-to-use-ib-inspectable-and-ib-designable"},"next":{"title":"阿里云直播鉴权算法","link":"2017/ali-cloud-live-authentication-algorithm"},"plink":"https://blog.fiteen.top/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"基本需求设计","title":"基本需求设计","index":"2"},{"id":"解决思路","title":"解决思路","index":"3"}],"reward":true,"copyright":{"author":"FiTeen","link":"<a href=\"https://blog.fiteen.top/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/\" title=\"iOS 购物车设计模式浅析及代码实现\">https://blog.fiteen.top/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}